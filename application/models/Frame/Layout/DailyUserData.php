<?php

namespace Frame\Layout;

/*
 * @autogenerated
*/
class DailyUserData extends \Frame\Base
{

    /**
     *
     * @var string
     */
    protected $aggregate_date;

    /**
     *
     * @var string
     */
    protected $game_id;

    /**
     *
     * @var string
     */
    protected $mobage_user_id;

    /**
     *
     * @var integer
     */
    protected $amount;

    /**
     *
     * @var string
     */
    protected $insert_time;

    /**
     *
     * @var string
     */
    protected $update_time;

    /**
     *
     * @var integer
     */
    protected $delete_flg;

    /**
     * Method to set the value of field aggregate_date
     *
     * @param string $aggregate_date
     * @return $this
     */
    public function setAggregateDate($aggregate_date)
    {
        $this->aggregate_date = $aggregate_date;

        return $this;
    }

    /**
     * Method to set the value of field game_id
     *
     * @param string $game_id
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->game_id = $game_id;

        return $this;
    }

    /**
     * Method to set the value of field mobage_user_id
     *
     * @param string $mobage_user_id
     * @return $this
     */
    public function setMobageUserId($mobage_user_id)
    {
        $this->mobage_user_id = $mobage_user_id;

        return $this;
    }

    /**
     * Method to set the value of field amount
     *
     * @param integer $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Method to set the value of field insert_time
     *
     * @param string $insert_time
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->insert_time = $insert_time;

        return $this;
    }

    /**
     * Method to set the value of field update_time
     *
     * @param string $update_time
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->update_time = $update_time;

        return $this;
    }

    /**
     * Method to set the value of field delete_flg
     *
     * @param integer $delete_flg
     * @return $this
     */
    public function setDeleteFlg($delete_flg)
    {
        $this->delete_flg = $delete_flg;

        return $this;
    }

    /**
     * Returns the value of field aggregate_date
     *
     * @return string
     */
    public function getAggregateDate()
    {
        return $this->aggregate_date;
    }

    /**
     * Returns the value of field game_id
     *
     * @return string
     */
    public function getGameId()
    {
        return $this->game_id;
    }

    /**
     * Returns the value of field mobage_user_id
     *
     * @return string
     */
    public function getMobageUserId()
    {
        return $this->mobage_user_id;
    }

    /**
     * Returns the value of field amount
     *
     * @return integer
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Returns the value of field insert_time
     *
     * @return string
     */
    public function getInsertTime()
    {
        return $this->insert_time;
    }

    /**
     * Returns the value of field update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    /**
     * Returns the value of field delete_flg
     *
     * @return integer
     */
    public function getDeleteFlg()
    {
        return $this->delete_flg;
    }

    public function getSource()
    {
        return 'daily_user_data';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @return DailyUserData[]
     * @param mixed $parameters
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @return DailyUserData
     * @param mixed $parameters
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return array(
            'aggregate_date' => 'aggregate_date', 
            'game_id' => 'game_id', 
            'mobage_user_id' => 'mobage_user_id', 
            'amount' => 'amount', 
            'insert_time' => 'insert_time', 
            'update_time' => 'update_time', 
            'delete_flg' => 'delete_flg'
        );
    }

}
